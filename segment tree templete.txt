int arr[100005] , st[400005];
                            //index is starting from one;
void build(int ind , int low , int high)
{
    if(low == high)
    {
        st[ind] = arr[low]; return ;
    }
    int mid = (low + high) / 2;
    build(2*ind , low , mid);
    build(2*ind+1 ,mid+1 , high);
    st[ind] = max(st[2*ind] , st[2*ind+1]);
}
 
int query(int ind , int low , int high , int l , int r)
{
    if(low > r || high < l) return INT_MIN;
 
    if(low >= l && high <= r) return st[ind];
 
    int mid = (low + high) / 2;
    int left=query(2*ind,low,mid,l,r);
    int right=query(2*ind+1,mid+1,high,l,r);
    return max(left,right);
}
void solve(){
    int n;
    cin>>n;
    for(int i=1;i<=n;i++)cin>>arr[i];
    build(1,1,n);
    int l,r,q;
    cin>>q;
    while(q--){
        cin>>l>>r;
        //index is starting from one; so input index should be one based;
        int ans=query(1,1,n,l,r);
        cout<<ans<<nline;
    }
    return;
}