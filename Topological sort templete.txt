//one based indexing topological sort
void toposort(int n,vector<int> adj[], vector<int> indegree){
    queue<int>q;
    for(int i=1;i<=n;i++){
        for(auto it:adj[i]){
            indegree[it]++;
        }
    }
    for(int i=1;i<=n;i++){
        if(indegree[i]==0)q.push(i);
    }
    vector<int>topo;
    while(!q.empty()){
        int node=q.front();q.pop();
        topo.pb(node);
        for(auto it:adj[node]){
            indegree[it]--;
            if(indegree[it]==0){
                q.push(it);
            }
        }
    }
    if(topo.size()==n){
        for(auto it:topo)cout<<it<<" ";
    }else{
        cout<<"Cycle is present in graph";
    }

}
//one based indexing topological sort
void solve(){
    int n,m;
    cin>>n>>m;
    vector<int> indegree(n+1,0);
    vector<int> adj[n+1];
    int x,y;
    for(int i=0;i<m;i++){
        cin>>x>>y;
        adj[x].pb(y),indegree[y]++;

    }
    //one based indexing topological sort
    toposort(n,adj,indegree);
    return;
}